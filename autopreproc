#!/usr/bin/env sh

if [[ $# -eq 0 ]]; then
    echo "Expect one or more cfg files as input for preprocessing"
    exit 1
fi

env

#Explicit MATLAB location
PATH=/Applications/MATLAB_R2015b.app/bin:${PATH}

# FSL Configuration
FSLDIR=/usr/local/ni_tools/fsl
PATH=${FSLDIR}/bin:${PATH}
. ${FSLDIR}/etc/fslconf/fsl.sh

#AFNI Configuration
PATH=/usr/local/ni_tools/afni:${PATH}

#local ni scripts directory
PATH=/usr/local/ni_tools/fmri_processing_scripts:${PATH}

#prefer fink binaries (esp. rsync 3.0+)
#PATH=/sw/bin:${PATH}
PATH=/usr/local/bin:${PATH}

export FSLDIR PATH
export DYLD_FALLBACK_LIBRARY_PATH=/opt/X11/lib:/opt/ni_tools/afni

function resetcfg {
    protocol=
    remote_host=
    remote_mrraw_root=
    remote_mb_root=
    remote_subid_regex=
    remote_folder_filter=
    remote_folder_depth=1
    loc_root=
    loc_mrraw_root=
    loc_mrproc_root=
    loc_mb_root=
    sync_mb_data=0
    sync_raw_data=0
    postrsync_exec=
    mprage_dirpattern=
    mprage_dicompattern=
    preprocessed_dirname=
    paradigm_name=
    n_expected_funcruns=
    preproc_call=
    gre_fieldmap_dirpattern=
    fieldmap_cfg=
    se_phasepos_dirpattern=
    se_phaseneg_dirpattern=
    se_phasepos_dicompattern=
    se_phaseneg_dicompattern=
    proc_freesurfer=0
    proc_functional=0
    preproc_resume=0 #whether to prefer preprocessFunctional -resume
    functional_dirpattern=
    functional_dicompattern=
    detect_refimg=0
    use_job_array=0 #whether to use PBS job array
    use_moab=0 #whether to use Moab to handle job arrays (instead of torque)
    mb_regex= #These were added to make preprocAll more generic
    mr_regex= #These were added to make preprocAll more generic
    task_name=
}

njobs=8 #default to 8 parallel jobs

scriptDir=$( dirname "$0" )
cd "${scriptDir}"
echo ""
echo "---------------"
echo "Current directory is: $PWD"
echo "Starting autopreproc at: $(date +%Y%m%d_%H%M)"

while [ _$1 != _ ] ; do
    if [ $1 = -njobs ]; then
	njobs="$2"
	shift 2
    else
	#process config file

	resetcfg #remove existing protocol config variables
	[ ! -f "$1" ] && echo "cfg file $1 does not exist" && exit 1
	source "$1" #bring config variables into scope

	echo "---"
	echo "Processing config file: $1"
	echo ""

	if [ ${sync_mb_data} -eq 1 ]; then
	    #1) rsync reconstructed multiband directory
	    echo "./syncMRCTR_Multiband \"${remote_mb_root}\" \"${loc_mb_root}\""
	    ./syncMRCTR_Multiband "${remote_mb_root}" "${loc_mb_root}" "{protocol}"

	    if [ "$protocol" == "WPC-5640" ]; then
		#for 5640 (multimodal), multiband recon directory naming is slightly different from dicoms
		#generate symlinks that make them conformable so that preprocessAll.R can match MB recon with raw MR.
		./link_ids.R "${loc_mb_root}"
	    fi
	fi

	if [ ${sync_raw_data} -eq 1 ]; then
            #2) sync MR_Raw directory (Dicoms)
	    echo "./syncMRCTR_MRRAW"
	    ./syncMRCTR_MRRAW #reads necessary variables from environment
	fi
	
	if [ "$protocol" == "WPC-7091" ] || [ "$protocol" == "WPC-7101" ]; then
	    echo "Organizing new subject data directories..."
	    python nfb_dir_organizer.py ${loc_root}
	fi
	

	#3) preprocess all data in mr directory: R script relies on environment variables sourced above for configuration
	echo "./preprocAll.R $njobs"
	./preprocAll.R $njobs

	echo "End config: $1"
	echo "---"
	echo ""
	shift 1
    fi
done

echo "Finishing autopreproc at: $(date +%Y%m%d_%H%M)"
echo "---------------"
